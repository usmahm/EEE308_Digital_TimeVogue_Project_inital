library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity TimeIncrementer is
  port(
    update_count : in std_logic;
    new_min_unit, new_min_tens, new_hour_tens, new_hour_unit : out std_logic_vector(3 downto 0)
  );
end entity;

architecture logic of TimeIncrementer is
begin
  process(update_count)
  begin
    if rising_edge(update_count) then
      -- if minute units is less than 9, increment, else go to 0
      if new_min_unit /= "1001" then
        new_min_unit <= std_logic_vector(unsigned(new_min_unit) + 1);
      else
        new_min_unit <= (others => '0');
  
        -- keep incrementing minute tens so far it's less than 5, else set to 0
        if new_min_tens /= "0101" then
          new_min_tens <= std_logic_vector(unsigned(new_min_tens) + 1);
        else
          new_min_tens <= (others => '0');
  
          if new_hour_tens /= "0010" then
            if new_hour_unit /= "1001" then
              new_hour_unit <= std_logic_vector(unsigned(new_hour_unit) + 1);
            else
              new_hour_unit <= (others => '0');
              new_hour_tens <= std_logic_vector(unsigned(new_hour_tens) + 1);
            end if;
          else
              if new_hour_unit /= "0011" then
                new_hour_unit <= std_logic_vector(unsigned(new_hour_unit) + 1);
              else
                new_hour_unit <= (others => '0');
                new_hour_tens <= (others => '0');
              end if;
          end if;
        end if;
      end if;
    end if;
  end process;
end architecture;